{"version":3,"file":"static/js/962.301954bc.chunk.js","mappings":"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","sources":["../node_modules/@ant-design/icons-svg/es/asn/ExperimentOutlined.js","../node_modules/@ant-design/icons/es/icons/ExperimentOutlined.js","demo/DemoControls.js","demo/mockDatabase.js","demo/mockApi.js"],"sourcesContent":["// This icon file is generated automatically.\nvar ExperimentOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M512 472a40 40 0 1080 0 40 40 0 10-80 0zm367 352.9L696.3 352V178H768v-68H256v68h71.7v174L145 824.9c-2.8 7.4-4.3 15.2-4.3 23.1 0 35.3 28.7 64 64 64h614.6c7.9 0 15.7-1.5 23.1-4.3 33-12.7 49.4-49.8 36.6-82.8zM395.7 364.7V180h232.6v184.7L719.2 600c-20.7-5.3-42.1-8-63.9-8-61.2 0-119.2 21.5-165.3 60a188.78 188.78 0 01-121.3 43.9c-32.7 0-64.1-8.3-91.8-23.7l118.8-307.5zM210.5 844l41.7-107.8c35.7 18.1 75.4 27.8 116.6 27.8 61.2 0 119.2-21.5 165.3-60 33.9-28.2 76.3-43.9 121.3-43.9 35 0 68.4 9.5 97.6 27.1L813.5 844h-603z\" } }] }, \"name\": \"experiment\", \"theme\": \"outlined\" };\nexport default ExperimentOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport ExperimentOutlinedSvg from \"@ant-design/icons-svg/es/asn/ExperimentOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar ExperimentOutlined = function ExperimentOutlined(props, ref) {\n  return React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: ExperimentOutlinedSvg\n  }));\n};\n\nExperimentOutlined.displayName = 'ExperimentOutlined';\nexport default React.forwardRef(ExperimentOutlined);","import { Button, Space, notification } from 'antd';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\n\r\nimport { ExperimentOutlined } from '@ant-design/icons';\r\nimport { authContext } from '../AuthContext';\r\nimport { postLoginApi } from '../api';\r\nimport { useApi } from '../useApi';\r\n\r\nexport const demoControl = {};\r\n\r\nexport function DemoControls() {\r\n\r\n    const { user, setUser } = useContext(authContext);\r\n    const [open, setOpen] = useState(true);\r\n    const [, login] = useApi(postLoginApi, setUser);\r\n\r\n    const history = useHistory();\r\n    demoControl.history = history;\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        if (!open) {\r\n            notification.close('demo');\r\n            return;\r\n        }\r\n\r\n        notification.info({\r\n            key: 'demo',\r\n            message: 'Modo de prueba',\r\n            duration: 0,\r\n            placement: 'bottomRight',\r\n            icon: <ExperimentOutlined />,\r\n            onClose: () => setOpen(false),\r\n            description: (\r\n                <>\r\n                    <p>Esta es una demostración llena de datos falsos.</p>\r\n                    <Space direction=\"vertical\">\r\n                        {location.pathname === '/kiosk' ?\r\n                            (\r\n                                <Button size=\"middle\" onClick={() => history.push('/')}>\r\n                                    Salir de modo Kiosko\r\n                                </Button>\r\n                            ) : (\r\n                                <>\r\n                                    <Button size=\"middle\" onClick={() => history.push('/kiosk')}>\r\n                                        Modo Kiosko\r\n                                    </Button>\r\n                                    {user?.userId !== 2 &&\r\n                                        <Button size=\"middle\" onClick={() => login(null, {\r\n                                            type: 'plain',\r\n                                            mail: 'otto@example.com',\r\n                                            password: 'demo',\r\n                                        })}>\r\n                                            Inicie sesión como administrador (Otto).\r\n                                        </Button>\r\n                                    }\r\n                                    {user?.userId !== 9 &&\r\n                                        <Button size=\"middle\" onClick={() => login(null, {\r\n                                            type: 'plain',\r\n                                            mail: 'max@example.com',\r\n                                            password: 'demo',\r\n                                        })}>\r\n                                            Inicie sesión como usuario (Max).\r\n                                        </Button>\r\n                                    }\r\n                                </>\r\n                            )\r\n                        }\r\n                        <Button size=\"middle\" type=\"primary\" onClick={() => setOpen(false)}>\r\n                        Ocultar\r\n                        </Button>\r\n                    </Space>\r\n                </>\r\n            ),\r\n        });\r\n    }, [open, history, location, user, login]);\r\n\r\n    if (!open)\r\n        return (\r\n            <Button \r\n                style={{ position: 'fixed', bottom: 5, right: 5 }}\r\n                type=\"primary\" \r\n                onClick={() => setOpen(true)}\r\n            >\r\n                Mostrar controles de prueba\r\n            </Button>\r\n        );\r\n\r\n    return null;\r\n}","import { RESERVATION_TYPES } from '../ReservationTypes';\r\nimport dayjs from 'dayjs';\r\n\r\nconst today = dayjs().startOf('day');\r\n\r\nexport const db = {\r\n\r\n    config: {\r\n        announcement: 'Este es un anuncio de muestra.\\n Se puede configurar un anuncio como administrador en Administración -> Ajustes generales.',\r\n        visibleHours: [8, 22],\r\n        orgName: 'Paddle Match',\r\n        serverMail: 'abc@def.de',\r\n        url: 'https://reservierung.xyz.de',\r\n        reservationDaysInAdvance: 90,\r\n        reservationMaxActiveCount: 10,\r\n        // timeZone: 'Europe/Berlin',\r\n        timeZone: dayjs.tz.guess(),\r\n    },\r\n\r\n    mailTemplates: {\r\n        reservationConfirmation: {\r\n            subject: 'Confirmación de reservación- Paddle Match',\r\n            body: `Hola {{name}}.<div><br>Acabas de realizar la siguiente reserva:<br><br>{{reservierung}}<br><br>Una reserva vinculante sólo se realiza cuando el token es confirmado.<br>No se pueden derivar reclamos legales por sistema de reservas.<br><br>Puedes obtener los tokens y el código de acceso de nuestros socios:<br>xyz<br><br>---</div><div><br></div><div>Paddle Match&nbsp;</div>`\r\n        },\r\n        reservationCancelled: {\r\n            subject: 'Cancelación de su reserva - Paddle Match',\r\n            body: `Hola {{name}}.<div><br>Tu reserva acaba de ser cancelada:<br><br>{{reservierung}}<br><br>Motivo de la cancelación:</div><div><br></div><div>{{grund}}<br><br><br>---</div><div><br></div><div>Paddle Match&nbsp;</div>`\r\n        },\r\n        confirmMail: {\r\n            subject: 'Registro: Confirma tu email- Paddle Match',\r\n            body: `Hola {{name}}.<div><br>Por favor confirme su dirección de correo electrónico haciendo clic en el siguiente enlace:<br><br>{{link}}<br></div><div><br></div><div>---</div><div><br></div><div>Paddle Match&nbsp;</div>`\r\n        },\r\n        resetPassword: {\r\n            subject: 'restablecer la contraseña - Paddle Match',\r\n            body: `Hola {{name}}.<div><br>Haga clic en el siguiente enlace para restablecer su contraseña:<br><br>{{link}}<br><br></div><div>---</div><div><br></div><div>Paddle Match&nbsp;</div>`\r\n        },\r\n    },\r\n\r\n    templates: {\r\n        reservationTos: {\r\n            body: `<h1>Precio</h1><div>15,- Euros por ficha<br>145,- Euros por 10 fichas<br></div><div><br></div><h1>Condiciones de uso</h1><ul>\r\n    <li>\r\n    Para usarlo necesitas tokens y un código de acceso. Puede obtenerlos de nuestros socios: <br>\r\nxyz asfdlkafsd, asdfkj 012387878 <br>\r\nxbasdfyz aad, asdfkj 129388 8123 <br>\r\n    </li>\r\n    <li>\r\n    Hay una cerradura con código en la entrada de la cancha en la que se debe ingresar un código numérico de 4 dígitos para activar la puerta.\r\n    </li>\r\n    <li>\r\n    Hay una máquina de fichas para cada cancha. Un token enciende la luz durante 1 hora (+ un cierto retraso) y habilita el control de la calefacción.\r\n    </li>\r\n    <li>\r\n    El uso después de las 22 horas y antes de las 8 horas es posible sin reservas.\r\n    </li>\r\n    <li>\r\n    No se pueden derivar reclamamos legales por el sistema de reservas.\r\n    </li>\r\n</ul>`\r\n        },\r\n        systemTos: {\r\n            body: `<ul>\r\n    <li>\r\n    No se pueden derivar reclamamos legales por el sistema de reservas.\r\n    </li>\r\n    <li>\r\n    Su nombre se mostrará públicamente en el calendario de reservas.\r\n    </li>\r\n    <li>\r\n    Usted acepta que se utilice una tecnología similar a las cookies para garantizar la funcionalidad del sistema. No hay seguimiento, etc.\r\n    </li>\r\n    <li>\r\n    Puedes ver y eliminar permanentemente tus datos guardados (cuenta de usuario, reservas) en cualquier momento.\r\n    </li>\r\n    <li>\r\n    Su correo electrónico se utilizará para confirmar reservas y notificarle si es necesario. Su correo electrónico no será compartido con terceros.\r\n    </li>\r\n</ul>`\r\n        },\r\n        infoPage: {\r\n            body: `<h1>Información general sobre el uso de la sala</h1><div><br><ul><li>Este es un sistema de reservas</li><li>Una reserva vinculante sólo se realiza cuando el token se inserta en la máquina de tokens.</li><liNo se pueden derivar reclamamos legales por el sistema de reservas.</li><li>No es necesario utilizar este sistema de reservas. También puedes utilizar la sala sin reserva, pero ten en cuenta que las reservas tienen prioridad.</li><li>También es posible utilizarlo después de las 22:00 horas y antes de las 8:00 horas. Estos horarios rara vez se solicitan y, por lo tanto, no figuran en el plan de reserva para mayor claridad.</li><li>Hay una cerradura con código en la entrada de la cancha en la que se debe ingresar un código numérico de 4 dígitos para activar la puerta.</li><li>Hay una máquina de fichas para cada cancha. Un token enciende la luz durante 1 hora (+ un cierto retraso) y habilita el control de la calefacción.</li><li>Puedes obtener los tokens y el código de acceso de nuestros socios:</li><li>hotel relexa Harz-Wald Braunlage, Karl-Röhrig Str. 5a, Tel. 05520/8070</li><li>BTG Braunlage (información turística), Elbingeröderstr.</li><li>Una ficha cuesta 15 euros</li><li>10 fichas cuestan 145 euros</li><li>No hay suscripción en el sentido real, sólo el descuento por 10 tokens o más.</li><li>Si necesita mucho más, por ejemplo, reservar todo el salón para un fin de semana, contáctenos.</li></ul></div><div><br></div><h1>Uso del sistema de reservas</h1><div><ul><li>¿Nuevo aquí?<br>Antes de poder utilizar el sistema de reservas, debes registrarte.</li><li>¿Cómo reservo una hora?<br>Simplemente haga clic en la hora deseada. Si no ha iniciado sesión regístrate y podrás reservar la hora que quieras simplemente haciendo clic sobre él.</li><li>¿Cómo cancelo una reserva?<br>Puedes cancelar reservas simplemente haciendo clic en la reserva. Sólo puedes cancelar tus propias reservas. Debes iniciar sesión para hacer esto.</li><li>¿Qué restricciones hay para las reservas?<br>Las reservas se pueden realizar con un máximo de 3 meses de antelación.</li><li>Cambiar contraseña, correo electrónico o nombre de usuario<br>Puedes cambiar tus datos en “Mi cuenta de usuario”.</li><li>GDPR: Eliminar/solicitar datos<br>Puedes solicitar todos tus datos en “Mi Cuenta de Usuario”.</li></ul></div>`,\r\n        },\r\n        legalPrivacy: {\r\n            body: `<h1>Impressum</h1><h1>Protección de Datos</h1>`,\r\n        },\r\n    },\r\n\r\n    courts: [\r\n        {\r\n            courtId: 1,\r\n            name: 'Club 1',\r\n        },\r\n        {\r\n            courtId: 2,\r\n            name: 'Club 2',\r\n        },\r\n        // {\r\n        //     courtId: 2,\r\n        //     name: 'Platz 3',\r\n        // }\r\n    ],\r\n\r\n    users: [\r\n        {\r\n            userId: 9,\r\n            name: 'Max Mustermann',\r\n            mail: 'max@example.com',\r\n            verified: true,\r\n            admin: false,\r\n            registeredAt: dayjs(),\r\n        },\r\n        {\r\n            userId: 2,\r\n            name: 'Otto Probiermal',\r\n            mail: 'otto@example.com',\r\n            verified: true,\r\n            admin: true,\r\n            registeredAt: dayjs(),\r\n        },\r\n        {\r\n            userId: 3,\r\n            name: 'Jürgen M.',\r\n            mail: 'juergen@example.com',\r\n            verified: true,\r\n            admin: false,\r\n            registeredAt: dayjs(),\r\n        },\r\n        {\r\n            userId: 8,\r\n            name: 'H. Müller',\r\n            mail: 'mueller@example.com',\r\n            verified: true,\r\n            admin: false,\r\n            registeredAt: dayjs(),\r\n        },\r\n        {\r\n            userId: 661,\r\n            name: 'Nick Sample',\r\n            mail: 'test.franz.mein.mail@franz.de',\r\n            verified: true,\r\n            admin: false,\r\n            registeredAt: dayjs(),\r\n        },\r\n        {\r\n            userId: 41,\r\n            name: 'Franz Test',\r\n            mail: 'test.franz.mein.mail@franz.de',\r\n            verified: false,\r\n            admin: false,\r\n            registeredAt: dayjs(),\r\n        }\r\n    ],\r\n\r\n    // primary key: id auto inc\r\n    // foreign key: groupId\r\n    reservations: [\r\n        {\r\n            id: 0,\r\n            from: today.add(-1, 'day').hour(11),\r\n            to: today.add(+3, 'day').hour(20),\r\n            courtId: 2,\r\n            groupId: 0,\r\n            created: today.add(-2, 'day').hour(11),\r\n        },\r\n        {\r\n            id: 1,\r\n            from: today.add(-1, 'day').hour(11),\r\n            to: today.add(-1, 'day').hour(12),\r\n            courtId: 1,\r\n            groupId: 1,\r\n            created: today.add(-2, 'day').hour(11),\r\n        },\r\n        {\r\n            id: 2,\r\n            from: today.add(3, 'day').hour(20),\r\n            to: today.add(3, 'day').hour(21),\r\n            courtId: 1,\r\n            groupId: 3,\r\n            created: today.add(-2, 'day').hour(11),\r\n        },\r\n        {\r\n            id: 3,\r\n            from: today.add(-2, 'day').hour(15),\r\n            to: today.add(-2, 'day').hour(16),\r\n            courtId: 1,\r\n            groupId: 2,\r\n            created: today.add(-4, 'day').hour(11),\r\n        },\r\n        {\r\n            id: 4,\r\n            from: today.add(-1, 'day').hour(15),\r\n            to: today.add(-1, 'day').hour(16),\r\n            courtId: 1,\r\n            groupId: 2,\r\n            created: today.add(-4, 'day').hour(11),\r\n        },\r\n        {\r\n            id: 5,\r\n            from: today.add(-0, 'day').hour(15),\r\n            to: today.add(-0, 'day').hour(16),\r\n            courtId: 1,\r\n            groupId: 2,\r\n            created: today.add(-4, 'day').hour(11),\r\n        },\r\n        {\r\n            id: 6,\r\n            from: today.add(1, 'day').hour(15),\r\n            to: today.add(1, 'day').hour(16),\r\n            courtId: 1,\r\n            groupId: 2,\r\n            created: today.add(-4, 'day').hour(11),\r\n        },\r\n        {\r\n            id: 7,\r\n            from: today.add(0, 'day').hour(17),\r\n            to: today.add(0, 'day').hour(18),\r\n            courtId: 1,\r\n            groupId: 4,\r\n            created: today.add(-4, 'day').hour(11),\r\n        },\r\n        {\r\n            id: 8,\r\n            from: today.add(7, 'day').hour(17),\r\n            to: today.add(7, 'day').hour(18),\r\n            courtId: 1,\r\n            groupId: 4,\r\n            created: today.add(-4, 'day').hour(11),\r\n        },\r\n        {\r\n            id: 9,\r\n            from: today.add(14, 'day').hour(17),\r\n            to: today.add(14, 'day').hour(18),\r\n            courtId: 1,\r\n            groupId: 4,\r\n            created: today.add(-4, 'day').hour(11),\r\n        },\r\n        {\r\n            id: 10,\r\n            from: today.add(21, 'day').hour(17),\r\n            to: today.add(21, 'day').hour(18),\r\n            courtId: 1,\r\n            groupId: 4,\r\n            created: today.add(-4, 'day').hour(11),\r\n        },\r\n    ],\r\n\r\n    // primary key: groupId auto_inc\r\n    reservationGroups: [\r\n        {\r\n            groupId: 0,\r\n            userId: null,\r\n            text: \"trabajo de enfermería\",\r\n            type: RESERVATION_TYPES.DISABLE,\r\n        },\r\n        {\r\n            groupId: 1,\r\n            userId: 9,\r\n            text: null,\r\n            type: RESERVATION_TYPES.NORMAL,\r\n        },\r\n        {\r\n            groupId: 3,\r\n            userId: 9,\r\n            text: null,\r\n            type: RESERVATION_TYPES.NORMAL,\r\n        },\r\n        {\r\n            groupId: 2,\r\n            userId: 3,\r\n            text: null,\r\n            type: RESERVATION_TYPES.NORMAL,\r\n        },\r\n        {\r\n            groupId: 4,\r\n            userId: 2,\r\n            text: null,\r\n            type: RESERVATION_TYPES.NORMAL,\r\n        },\r\n    ]\r\n};\r\n\r\nwindow.getFakeDb = () => {\r\n    return db;\r\n};\r\n\r\nwindow.addFakeReservation = () => {\r\n    db.reservationGroups.push({\r\n        groupId: 999,\r\n        userId: 2,\r\n        text: 'Fake',\r\n        type: RESERVATION_TYPES.NORMAL,\r\n    });\r\n\r\n    db.reservations.push({\r\n        from: today.hour(8),\r\n        to: today.hour(9),\r\n        courtId: 1,\r\n        groupId: 999,\r\n        created: today,\r\n    });\r\n}\r\n","import { Button, notification } from 'antd';\r\nimport { deleteUserApi, getBaseDataApi, getMailTemplatesApi, getReservationsApi, getUsersApi, patchConfigApi, patchReservationGroupApi, patchUserApi, postLoginApi, postLogoutApi, postRegisterApi, postReservationGroupApi, postSendVerifyMailApi, postVerifyMailApi, putCourtsApi, putMailTemplateApi, putTemplateApi } from '../api';\r\nimport { parseQuery, reservationOverlap } from '../helper';\r\n\r\nimport { RESERVATION_TYPES } from '../ReservationTypes';\r\nimport dayjs from 'dayjs';\r\nimport { db } from './mockDatabase';\r\nimport { demoControl } from './DemoControls';\r\n\r\nconst fakeDelay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nconst cn = ({ url, method }) => {\r\n    let u = method || 'GET';\r\n    const di = url.indexOf(':');\r\n    return u + (di !== -1 ? url.slice(0, di) : url);\r\n};\r\n\r\nasync function handleRequests(url, options) {\r\n    const body = options.body ? JSON.parse(options.body) : null;\r\n\r\n    const queryIndex = url.indexOf('?');\r\n    const cleanUrl = queryIndex !== -1 ? url.slice(0, queryIndex) : url;\r\n    const params = parseQuery(url.slice(queryIndex));\r\n\r\n    const lastSlashIndex = cleanUrl.lastIndexOf('/');\r\n    const firstUrlPart = cleanUrl.slice(0, lastSlashIndex + 1);\r\n    const lastUrlPart = cleanUrl.slice(lastSlashIndex + 1);\r\n\r\n    let authUserId = options.headers?.[\"Authorization\"]?.split('.')[1];\r\n    authUserId = authUserId && parseInt(authUserId);\r\n\r\n    const tryStrings = [\r\n        `${options.method}${cleanUrl}`,\r\n        `${options.method}${firstUrlPart}`,\r\n    ];\r\n\r\n    for (let s of tryStrings) {\r\n        switch (s) {\r\n            case cn(getBaseDataApi):\r\n                return {\r\n                    config: db.config,\r\n                    courts: db.courts,\r\n                    templates: db.templates,\r\n                };\r\n\r\n            case cn(patchConfigApi):\r\n                db.config = {\r\n                    ...db.config,\r\n                    ...body,\r\n                };\r\n                return { success: true };\r\n\r\n            case cn(putCourtsApi):\r\n                db.courts = body;\r\n                return { success: true };\r\n\r\n            case cn(getMailTemplatesApi):\r\n                return db.mailTemplates;\r\n\r\n            case cn(putMailTemplateApi):\r\n                db.mailTemplates = {\r\n                    ...db.mailTemplates,\r\n                    [body.id]: body,\r\n                };\r\n                return { success: true };\r\n\r\n            case cn(putTemplateApi):\r\n                db.templates = {\r\n                    ...db.templates,\r\n                    [body.id]: body,\r\n                };\r\n                return { success: true };\r\n\r\n            case cn(getUsersApi):\r\n                return db.users.map(user => ({\r\n                    ...user,\r\n                    upcomingReservationCount: 123,\r\n                    totalReservationCount: 1234,\r\n                    lastActivity: dayjs(),\r\n                }));\r\n\r\n            case cn(patchUserApi):\r\n                db.users = db.users.map(u => {\r\n                    if (u.userId === body.userId)\r\n                        return {\r\n                            ...u,\r\n                            ...body,\r\n                            verified: (!body.mail || u.mail === body.mail)\r\n                                ? u.verified : false,\r\n                        };\r\n                    return u;\r\n                });\r\n                return { success: true };\r\n\r\n            case cn(postRegisterApi):\r\n                if (db.users.some(u => u.mail === body.mail))\r\n                    return {\r\n                        __status: 400,\r\n                        json: { message: 'mail already registered' }\r\n                    };\r\n                const newUser = {\r\n                    name: body.name,\r\n                    mail: body.mail,\r\n                    password: 'hashedPw',\r\n                    userId: Math.floor(Math.random() * Number.MAX_SAFE_INTEGER),\r\n                    verified: false,\r\n                    admin: false,\r\n                    registeredAt: dayjs(),\r\n                };\r\n                db.users.push(newUser);\r\n                return {\r\n                    token: `demo-token.${newUser.userId}`,\r\n                    userId: newUser.userId,\r\n                    name: newUser.name,\r\n                    mail: newUser.mail,\r\n                    verified: newUser.verified,\r\n                    admin: newUser.admin,\r\n                };\r\n\r\n            case cn(postLoginApi): {\r\n                // await fakeDelay(800);\r\n                const { type, token, mail, /* password */ } = body;\r\n                let user;\r\n                if (type === 'token') {\r\n                    const userId = parseInt(token.split('.')[1]);\r\n                    user = db.users.find(u => u.userId === userId);\r\n                } else {\r\n                    // ignore password in demo\r\n                    user = db.users.find(u => u.mail === mail);\r\n                }\r\n                if (!user)\r\n                    return {\r\n                        __status: 401,\r\n                        json: { message: 'wrong login' }\r\n                    };\r\n                return {\r\n                    token: `demo-token.${user.userId}`,\r\n                    userId: user.userId,\r\n                    name: user.name,\r\n                    mail: user.mail,\r\n                    verified: user.verified,\r\n                    admin: user.admin,\r\n                };\r\n            }\r\n\r\n            case cn(postLogoutApi):\r\n                return { success: true };\r\n\r\n            case cn(deleteUserApi):\r\n                db.users = db.users.filter(u => u.userId !== body.userId);\r\n                return { success: true };\r\n\r\n            case cn(postSendVerifyMailApi): {\r\n                const verifyToken = btoa(body.mail);\r\n                notification.warn({\r\n                    key: 'fake-verification',\r\n                    message: 'Demo E-Mail Verifikation',\r\n                    duration: 0,\r\n                    placement: 'bottomRight',\r\n                    description: (\r\n                        <div>\r\n                            <p>Dies simuliert den Verifikationsprozess für <strong>{body.mail}</strong>.</p>\r\n                            <Button onClick={() => {\r\n                                demoControl.history?.push(`/verify-mail/${verifyToken}`);\r\n                                notification.close('fake-verification');\r\n                            }}>\r\n                                E-Mail Verifizieren (Demo)\r\n                        </Button>\r\n                        </div>\r\n                    ),\r\n                });\r\n                return { success: true };\r\n            }\r\n\r\n            case cn(postVerifyMailApi): {\r\n                const mail = atob(body.token);\r\n                const user = db.users.find(u => u.mail === mail);\r\n                if (!user)\r\n                    return {\r\n                        __status: 404,\r\n                        json: { message: 'user not found' }\r\n                    };\r\n                user.verified = true;\r\n                return { success: true };\r\n            }\r\n\r\n            case cn(getReservationsApi): {\r\n                const start = params.start && dayjs(params.start);\r\n                const end = params.end && dayjs(params.end);\r\n                const groupId = params['group-id'] && parseInt(params['group-id']);\r\n                const userId = params['user-id'] && parseInt(params['user-id']);\r\n                const reservations = [];\r\n\r\n                const checkDate = ({ from, to }) => {\r\n                    let check = true;\r\n                    if (start)\r\n                        check = check && start.isSameOrBefore(to);\r\n                    if (end)\r\n                        check = check && end.isSameOrAfter(from);\r\n                    return check;\r\n                };\r\n\r\n                const checkGroupId = (gId) => {\r\n                    if (groupId)\r\n                        return groupId === gId;\r\n                    return true;\r\n                };\r\n\r\n                const checkUserId = (uId) => {\r\n                    if (userId)\r\n                        return userId === uId;\r\n                    return true;\r\n                };\r\n\r\n                db.reservations.forEach(r => {\r\n                    if (checkDate(r)) {\r\n                        db.reservationGroups.forEach(g => {\r\n                            if (g.groupId === r.groupId && checkGroupId(g.groupId)) {\r\n                                const user = db.users.find(u => g.userId === u.userId);\r\n                                if (checkUserId(user?.userId))\r\n                                    reservations.push({\r\n                                        ...r,\r\n                                        ...g,\r\n                                        name: user?.name || undefined,\r\n                                        created: undefined,\r\n                                    });\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                return reservations;\r\n            }\r\n\r\n            // case cn(deleteReservationGroupApi):\r\n            case cn(patchReservationGroupApi):\r\n            case cn(postReservationGroupApi): {\r\n                // TODO ensure that user is admin if reservation.type = DISABLE\r\n                let groupId;\r\n                try {\r\n                    groupId = parseInt(lastUrlPart);\r\n                    if (isNaN(groupId))\r\n                        groupId = null;\r\n                } catch (e) { }\r\n                groupId = groupId ?? (db.reservationGroups.reduce((nextId, g) => {\r\n                    return Math.max(nextId, g.groupId);\r\n                }, 0) + 1);\r\n                const text = body?.text;\r\n                // todo real server: check if from,to are set\r\n                const reservations = body?.reservations?.map(({ courtId, from, to }) => ({\r\n                    courtId,\r\n                    from: dayjs(from),\r\n                    to: dayjs(to),\r\n                }));\r\n\r\n                if (!reservations?.length) {\r\n                    // same as delete all\r\n                    db.reservationGroups = db.reservationGroups.filter(g => g.groupId !== groupId);\r\n                    db.reservations = db.reservations.filter(r => r.groupId !== groupId);\r\n                } else {\r\n                    const group = db.reservationGroups.find(g => g.groupId === groupId);\r\n                    if (text && group) // group is null if post\r\n                        group.text = text;\r\n                    \r\n                    const { groupReservations, rest } = db.reservations.reduce((acc, r) => {\r\n                        if (r.groupId === groupId)\r\n                            acc.groupReservations.push(r);\r\n                        else\r\n                            acc.rest.push(r);\r\n                        return acc;\r\n                    }, { groupReservations: [], rest: [] });\r\n\r\n                    let { keepReservations, newReservations } = reservations.reduce((acc, { courtId, from, to }) => {\r\n                        const found = groupReservations.find(r =>\r\n                            r.from.isSame(from, 'hour') \r\n                            && r.to.isSame(to, 'hour')\r\n                            && r.courtId === courtId\r\n                        );\r\n                        if (found)\r\n                            acc.keepReservations.push(found);\r\n                        else\r\n                            acc.newReservations.push({\r\n                                from,\r\n                                to,\r\n                                courtId,\r\n                                groupId,\r\n                                created: dayjs(),\r\n                            });\r\n                        return acc;\r\n                    }, { keepReservations: [...rest], newReservations: [] });\r\n\r\n                    const userId = group?.userId || authUserId;\r\n                    const user = db.users.find(u => u.userId === userId);\r\n\r\n                    const today = dayjs();\r\n                    const maxDate = today.add(db.config.reservationDaysInAdvance, 'day');\r\n                    let { conflicts, unavailableReservations } = newReservations.reduce((acc, r) => {\r\n                        const allFound = keepReservations.filter(r2 => reservationOverlap(r, r2));\r\n                        if (allFound.length) {\r\n                            acc.conflicts.push(...allFound);\r\n                            acc.unavailableReservations.push(r);\r\n                        } else if ((!user.admin && r.to.isAfter(maxDate, 'day'))\r\n                            || (!user.admin && r.from.isBefore(today, 'hour'))) {\r\n                            acc.unavailableReservations.push(r);\r\n                        }\r\n                        return acc;\r\n                    }, { conflicts: [], unavailableReservations: [] });\r\n\r\n                    const type = body?.type || group.type;\r\n                    if (type === RESERVATION_TYPES.DISABLE) {\r\n                        // delete \r\n                        const { normal, disabled } = conflicts.reduce((acc, r) => {\r\n                            const group = db.reservationGroups.find(g => g.groupId === r.groupId);\r\n                            if (group.type === RESERVATION_TYPES.DISABLE)\r\n                                acc.disabled.push(r);\r\n                            else\r\n                                acc.normal.push(r);\r\n                            return acc;\r\n                        }, { normal: [], disabled: [] });\r\n                        \r\n                        if (disabled.length) \r\n                            return {\r\n                                __status: 409,\r\n                                json: { unavailableReservations: disabled }\r\n                            };\r\n                        \r\n                        // todo delete empty groups\r\n                        if (normal.length)\r\n                            keepReservations = keepReservations.filter(k => !normal.some(n => \r\n                                n.from.isSame(k.from, 'hour') \r\n                                && n.to.isSame(k.to, 'hour') \r\n                                && n.courtId === k.courtId));\r\n                        \r\n                    } else if (unavailableReservations.length > 0) {\r\n                        return {\r\n                            __status: 409,\r\n                            json: { unavailableReservations }\r\n                        };\r\n                    }\r\n\r\n                    const updatedReservations = [\r\n                        ...keepReservations,\r\n                        ...newReservations,\r\n                    ];\r\n\r\n                    if (!user.admin) {\r\n                        // count user reservations\r\n                        const userGroupIds = [\r\n                            groupId,\r\n                            ...db.reservationGroups\r\n                                .filter(g => g.userId === userId)\r\n                                .map(g => g.groupId)\r\n                        ];\r\n                        const resCount = updatedReservations.reduce((acc, r) => {\r\n                            if (userGroupIds.includes(r.groupId) && r.from.isSameOrAfter(today, 'hour'))\r\n                                return acc + 1;\r\n                            return acc;\r\n                        }, 0);\r\n\r\n                        if (resCount > db.config.reservationMaxActiveCount)\r\n                            return {\r\n                                __status: 403,\r\n                                json: {\r\n                                    message: 'too many active reservations',\r\n                                    value: resCount,\r\n                                    max: db.config.reservationMaxActiveCount,\r\n                                }\r\n                            };\r\n                    }\r\n\r\n                    db.reservations = updatedReservations;\r\n\r\n                    // new reservation ~ post\r\n                    if (!groupReservations.length) {\r\n                        const group = {\r\n                            groupId,\r\n                            text,\r\n                            type: body?.type || RESERVATION_TYPES.NORMAL,\r\n                            userId,\r\n                        };\r\n                        db.reservationGroups.push(group);\r\n\r\n                        return newReservations.map(r => ({\r\n                            ...r,\r\n                            ...group,\r\n                            name: user.name,\r\n                            created: undefined,\r\n                        }));\r\n                    }\r\n                }\r\n\r\n                return { success: true };\r\n            }\r\n\r\n            default:\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction byteLen(x) {\r\n    const str = typeof x === 'string' ? x : JSON.stringify(x);\r\n    const m = encodeURIComponent(str).match(/%[89ABab]/g);\r\n    return str.length + (m ? m.length : 0);\r\n}\r\n\r\nexport function patchFetch() {\r\n    const _fetch = window.fetch;\r\n\r\n    window.fetch = async (url, options) => {\r\n\r\n        await fakeDelay(200);\r\n\r\n        let res;\r\n        try {\r\n            res = await handleRequests(url, options || {});\r\n        } catch (err) {\r\n            console.log(err);\r\n            res = {\r\n                __status: 500,\r\n                json: { error: true },\r\n            };\r\n        }\r\n\r\n        console.log(\"Fake API:\", {\r\n            request: { url, options },\r\n            response: res,\r\n            db,\r\n            totalKb: byteLen({ res, }) / 1024,\r\n        });\r\n\r\n        if (res?.__status) {\r\n            return Promise.resolve({\r\n                ok: false,\r\n                status: res.__status,\r\n                json: async () => Promise.resolve(JSON.parse(JSON.stringify(res.json))),\r\n            });\r\n        } else if (res) {\r\n            return Promise.resolve({\r\n                ok: true,\r\n                json: async () => Promise.resolve(JSON.parse(JSON.stringify(res))),\r\n            });\r\n        }\r\n\r\n        return _fetch(url, options);\r\n    };\r\n}"],"names":["ExperimentOutlined","props","ref","React","AntdIcon","Object","assign","icon","ExperimentOutlinedSvg","displayName","demoControl","DemoControls","user","setUser","useContext","authContext","open","setOpen","useState","login","useApi","postLoginApi","history","useHistory","location","useLocation","useEffect","notification","info","key","message","duration","placement","_jsx","onClose","description","_jsxs","_Fragment","children","Space","direction","pathname","Button","size","onClick","push","userId","type","mail","password","close","style","position","bottom","right","today","dayjs","startOf","db","config","announcement","visibleHours","orgName","serverMail","url","reservationDaysInAdvance","reservationMaxActiveCount","timeZone","guess","mailTemplates","reservationConfirmation","subject","body","reservationCancelled","confirmMail","resetPassword","templates","reservationTos","systemTos","infoPage","legalPrivacy","courts","courtId","name","users","verified","admin","registeredAt","reservations","id","from","add","hour","to","groupId","created","reservationGroups","text","RESERVATION_TYPES","DISABLE","NORMAL","window","getFakeDb","addFakeReservation","fakeDelay","ms","Promise","resolve","setTimeout","cn","_ref","method","u","di","indexOf","slice","byteLen","x","str","JSON","stringify","m","encodeURIComponent","match","length","patchFetch","_fetch","fetch","async","options","_res","res","_options$headers","_options$headers$Auth","parse","queryIndex","cleanUrl","params","parseQuery","lastSlashIndex","lastIndexOf","firstUrlPart","lastUrlPart","authUserId","headers","split","parseInt","tryStrings","concat","s","getBaseDataApi","patchConfigApi","success","putCourtsApi","getMailTemplatesApi","putMailTemplateApi","putTemplateApi","getUsersApi","map","upcomingReservationCount","totalReservationCount","lastActivity","patchUserApi","postRegisterApi","some","__status","json","newUser","Math","floor","random","Number","MAX_SAFE_INTEGER","token","find","postLogoutApi","deleteUserApi","filter","postSendVerifyMailApi","verifyToken","btoa","warn","_demoControl$history","postVerifyMailApi","atob","getReservationsApi","start","end","checkDate","_ref2","check","isSameOrBefore","isSameOrAfter","checkGroupId","gId","checkUserId","uId","forEach","r","g","undefined","patchReservationGroupApi","postReservationGroupApi","_groupId","_body$reservations","isNaN","e","reduce","nextId","max","_ref3","group","groupReservations","rest","acc","keepReservations","newReservations","_ref4","found","isSame","maxDate","conflicts","unavailableReservations","allFound","r2","reservationOverlap","isAfter","isBefore","normal","disabled","k","n","updatedReservations","userGroupIds","resCount","includes","value","handleRequests","err","console","log","error","request","response","totalKb","ok","status"],"sourceRoot":""}